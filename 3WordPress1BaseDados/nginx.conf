events { 
}

http {
    #Configurações de cache
    #proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
    #proxy_cache_key "$scheme$request_method$host$request_uri";
    #proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    #proxy_cache_valid 200 302 10m;  # 
    #proxy_cache_valid 404 1m;       #

  upstream backends {
    #A estratégia de least connections envia a requisição para o servidor com menos conexões ativas no momento.
    # --least_conn;
    # A estratégia de IP hash garante que as requisições de um determinado 
    #cliente sempre vão para o mesmo servidor. 
    #Isso é útil para manter a sessão (sessões persistentes).
    # --ip_hash;

  #1.4 Weight-Based Load Balancing:
  #atribuir pesos diferentes a cada servidor, distribuindo mais tráfego para servidores mais rápidos ou com mais recursos.
  #Copiar código
  #upstream backends {
   #   server wordpress1 weight=3;  # Recebe mais tráfego
   #  server wordpress2 weight=1;
   #server wordpress3 weight=1;
   #}
    #least_conn; 
    # when the laod balancing method is not specifically configured, it defaults to round-robin
    #; 
    #ip_hash there is no guarantee that the same client will be always directed to the same server
    # weighted load balancing, have how do in the code up.
    #ip_hash;
    #least_conn;
    #ip_hash;
    server wordpress1;  #weight=3;
    server wordpress2 ; #weight=2;
    server wordpress3 ; #weight=1;
  }

  #adicionado um comentario para teste
  #testeOctober 25, 2024

   # save Draft



  server {
    location / {
      proxy_pass http://backends;
      #proxy_cache my_cache;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }

}

